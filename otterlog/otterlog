#!/usr/bin/env python
"""
Yet another QSO logger for HAMs.

Dec 2015 - xaratustra

"""

import sqlite3
import argparse
import logging as log
import os
import datetime

verbose = False


class LogData(object):
    """
    Class for handling log data
    """

    def __init__(self, filename):
        """
        Initiator of the class
        :param filename:
        :return:
        """
        self.db = None
        self.cursor = None
        self.filename = filename

        # QSO related fields

        self.qso_date = None
        self.time_on = None
        self.call = None
        self.mode = None
        self.band = None
        self.freq = None
        self.prop_mode = None
        self.programid = 'OTTERLOG'
        self.qslmeg = None
        self.rst_sent = None
        self.name = None
        self.rst_rcvd = None
        self.rx_pwr = None
        self.tx_pwr = None
        self.gridsquare = None
        self.notes = None

    def __str__(self):
        return '{} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {}'.format(self.qso_date,
                                                                        self.time_on,
                                                                        self.call,
                                                                        self.mode,
                                                                        self.band,
                                                                        self.freq,
                                                                        self.prop_mode,
                                                                        self.programid,
                                                                        self.qslmeg,
                                                                        self.rst_sent,
                                                                        self.name,
                                                                        self.rst_rcvd,
                                                                        self.rx_pwr,
                                                                        self.tx_pwr,
                                                                        self.gridsquare,
                                                                        self.notes)

    def create_db(self):
        """
        Create the database.
        :return:
        """
        try:
            # Creates or opens a file with a SQLite3 DB
            self.db = sqlite3.connect(self.filename)
            # Get a cursor object
            self.cursor = self.db.cursor()
            # Check if table users does not exist and create it
            self.cursor.execute('''CREATE TABLE IF NOT EXISTS
                                qso(id INTEGER PRIMARY KEY AUTOINCREMENT,
                                qso_date   TEXT,
                                time_on	TEXT,
                                call	TEXT,
                                mode	TEXT,
                                band	TEXT,
                                freq	REAL,
                                prop_mode	TEXT,
                                programid	TEXT,
                                qslmeg	TEXT,
                                rst_sent	INTEGER,
                                name	TEXT,
                                rst_rcvd	INTEGER,
                                rx_pwr	REAL,
                                tx_pwr	REAL,
                                gridsquare	TEXT,
                                notes      TEXT
                                )''')

            # Commit the change
            self.db.commit()
            log.info('DB creation successful.')

        # Catch the exception
        except Exception as e:
            # Roll back any change if something goes wrong
            self.db.rollback()
            log.error('Something wrong.')
            raise e
            # finally:
            #     # Close the db connection
            #     self.db.close()

    def insert_into_db(self):
        """
        Insert a new entry into the database
        :return:
        """
        try:
            self.cursor.execute(
                '''INSERT INTO qso(
                qso_date,
                time_on,
                call,
                mode,
                band,
                freq,
                prop_mode,
                programid,
                qslmeg,
                rst_sent,
                name,
                rst_rcvd,
                rx_pwr,
                tx_pwr,
                gridsquare,
                notes)
                VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                (self.qso_date,
                 self.time_on,
                 self.call,
                 self.mode,
                 self.band,
                 self.freq,
                 self.prop_mode,
                 self.programid,
                 self.qslmeg,
                 self.rst_sent,
                 self.name,
                 self.rst_rcvd,
                 self.rx_pwr,
                 self.tx_pwr,
                 self.gridsquare,
                 self.notes))
            # Commit the change
            self.db.commit()
            log.info('DB commit successful.')
        # Catch the exception
        except Exception as e:
            # Roll back any change if something goes wrong
            self.db.rollback()
            log.error('Something wrong.')
            raise e

    def close_db(self):
        # Close the db connection
        self.db.close()

    # ------------ MAIN ----------------------------


if __name__ == '__main__':

    scriptname = __file__.split('/')[1].split('.')[0]
    home_folder = os.path.expanduser('~') + '/.{}/'.format(scriptname)
    default_db_filename = home_folder + '{}.sqlite'.format(scriptname)

    parser = argparse.ArgumentParser()
    parser.add_argument('-f', '--filename', nargs='?', type=str, help='Name of the database file.',
                        default=default_db_filename)
    parser.add_argument('-v', '--verbose', help='Increase output verbosity', action='store_true')

    args = parser.parse_args()
    if args.verbose:
        log.basicConfig(level=log.DEBUG)
        verbose = True

    fn = args.filename

    if fn == default_db_filename:
        log.info('Using the default filename in user\'s home foler.')
        if not os.path.exists(home_folder):
            os.mkdir(home_folder)

    # make sure the file extension is correct
    if not fn.lower().endswith('.sqlite'):
        fn += '.sqlite'

    log_data = LogData(filename=fn)

    log_data.qso_date = input('Date YYMMDD [empty for today]: ')
    if log_data.qso_date == '':
        log_data.qso_date = datetime.datetime.now().strftime('%Y%m%d')
    log_data.time_on = input('UTC time HHMM [empty for just now]: ')
    if log_data.time_on == '':
        log_data.time_on = datetime.datetime.now().strftime('%H%M')
    log_data.call = input('OM\'s call sign: ')
    log_data.name = input('OM\'s name : ')
    log_data.gridsquare = input('OM\'s locator : ')
    log_data.mode = input('Mode : ')
    log_data.band = input('Band : ')
    log_data.freq = input('Frequncy : ')

    while True:
        log_data.tx_pwr = input('Your power : ')
        if not log_data.tx_pwr == '':
            try:
                log_data.tx_pwr = float(log_data.tx_pwr)
            except ValueError:
                print("Sorry, I didn't understand that.")
                continue
            else:
                break
        else:
            break

    while True:
        log_data.rst_sent = input('Your RST : ')
        if not log_data.rst_sent == '':
            try:
                log_data.rst_sent = int(log_data.rst_sent)
            except ValueError:
                print("Sorry, I didn't understand that.")
                continue
            if log_data.rst_sent > 599:
                print('RST can not be greater than 599.')
            else:
                break
        else:
            break

    while True:
        log_data.rx_pwr = input('OM\'s power : ')
        if not log_data.rx_pwr == '':
            try:
                log_data.rx_pwr = float(log_data.rx_pwr)
            except ValueError:
                print("Sorry, I didn't understand that.")
                continue
            else:
                break
        else:
            break

    while True:
        log_data.rst_rcvd = input('OM\'s RST : ')
        if not log_data.rst_rcvd == '':
            try:
                log_data.rst_rcvd = int(log_data.rst_rcvd)
            except ValueError:
                print("Sorry, I didn't understand that.")
                continue
            if log_data.rst_rcvd > 599:
                print('RST can not be greater than 599.')
            else:
                break
        else:
            break

    log_data.prop_mode = input('Propagation Mode : ')
    log_data.qslmeg = input('QSL Message : ')
    log_data.notes = input('Comments : ')

    # -----

    log_data.create_db()
    log_data.insert_into_db()
    log.info('Following record was written in DB :\n {}'.format(log_data))
    log_data.close_db()
